============================
APACHE TOMCAT ADMINISTRATION
============================

# Summary:
----------
Introduction
Installtion
Gestionnaire Tomcat
Console d'administrateur


# Introduction:
---------------

Apache Tomcat est un conteneur de servlets et serveur Web qui permet d'exécuter des applications Web basées sur JSP (JavaServer Pages). La plupart des Frameworks Web Java modernes sont basées sur des servlets, par exemple. JavaServer Faces, Struts, Spring.

Apache Tomcat fournit également par défaut un connecteur HTTP sur le port 8080, c'est-à-dire que Tomcat peut également être utilisé comme serveur HTTP. Toutefois, les performances de Tomcat ne sont pas aussi bonnes que celles d'un serveur Web désigné, comme le serveur HTTP Apache.

# Installation
--------------

1) Linux:

	> Arch :
	
	> Debian / Ubuntu :
	sudo apt-get install tomcat9
	sudo apt-get install tomcat9-admin
	sudo apt-get install tomcat9-docs
	sudo apt-get install tomcat9-examples

2) Windows:
	installation steps goes here

# Gestionnaire Tomcat
-------------------------

Pour demarrer Tomcat sur Linux il suffit de taper dans le terminal les commande ci dessous accompagne avec Start, Stop et Restart:
	
	#Restart
	sudo /etc/init.d/tomcat9 restart
	
	#Stop
	sudo /etc/init.d/tomcat9 stop

Pour demarrer Tomcat sur Windows on execute le fichier "tomcat9.exe" situe dans le directoire bin.

Tomcat utilise le port 8080 par defaut, pour verifier que Tomcat est bien execute, il faut aller au lien localhost:8080, en cas d'execution une page web contenant un message de bienvenu par Tomcat doit apparaitre.


# Console d'administrateur:
---------------------------
Tomcat fournit une console d’administration basée sur le Web qui peut être démarrée via le lien suivant:

	http://localhost:8080/manager/html
	
	
	
	
	
==============================
		WEB SERVICES
==============================


# Introduction:

Les applications professionnelles modernes utilisent diverses plates-formes de programmation pour développer des applications Web. 
Certaines applications peuvent être développées en Java, d’autres en .Net, d’autres en Angular JS, Node.js, etc.

Le plus souvent, ces applications hétérogènes nécessitent une sorte de communication entre elles. Tant qu'ils sont construits avec différents langages de développement, il devient très difficile d'assurer une communication précise entre les applications.

Here is where web services come in. Web services provide a common platform that allows multiple applications built on various programming languages to have the ability to communicate with each other. C'est la où les Web services entrent en jeu. 
Les Web services constituent une plate-forme commune qui permet à plusieurs applications basées sur différents langages de programmation de communiquer entre elles.

Dans ce rapport, je vais expliquer ce que j'ai appris durant ma recherche sur les Web Services, les différents éléments constitutifs des Web Services et un peu sur les principes de la SOA (Service Oriented Architecture).

# Historique:

Les services Web ont évolué à partir du mécanisme RPC (Remote Procedure Call) de DCE (Distributed Computing Environment), une structure pour le 
développement de logiciels à partir des années 1990. DCE comprend un système de fichiers distribué (DCE / DFS) et un système d'authentification 
basé sur Kerberos. Bien que DCE tire ses origines du monde Unix, Microsoft a rapidement mis en oeuvre sa propre implémentation, appelée MSRPC, 
qui a à son tour servi d’infrastructure pour la communication interprocessus dans Windows.
DCE a conçu le RPC comme moyen pour effectuer le computing distribuée (c’est-à-dire, le computing sur des périphériques physiques distincts)
et Microsoft a intelligemment adapté le RPC pour prendre en charge la communication interprocessus, sous la forme d’une infrastructure COM (Common Object Model), 
sur un seul périphérique, un PC sous Windows.
Les premières générations des Frameworks pour les systèmes d’objets distribués, CORBA (Common Object Request Broker Architecture) et 
Microsoft DCOM (Distributed COM), sont modifiées dans le cadre procédural DCE / RPC. Java RMI (Remote Method Invocation) provient également de DCE/RPC,
et les appels de méthode dans Java EE (Enterprise Edition), en particulier dans les EJB Session et Entity (Enterprise Java Bean), 
sont des appels Java RMI. JavaEE  et DotNet de Microsoft sont des frameworks de deuxième génération pour les systèmes d’objets distribués, 
et ces frameworks, comme CORBA et DCOM avant eux, retracent leur ascendance vers DCE / RPC. À propos, DCE / RPC n'est pas mort. 
Divers utilitaires système populaires (par exemple, le fichier Samba et le service d'impression pour les clients Windows) utilisent DCE / RPC.

# C'est quoi un Web Service?

Un Web service est un module logiciel conçu pour effectuer un certain ensemble de tâches.
    • Les Web services peuvent être recherchés sur le réseau et peuvent également être appelés en conséquence.
    • Lorsqu'il est appelé, le service Web peut fournir une fonctionnalité au client qui appelle ce Web service.

Le client invoquerait une série d'appels de Web services via des demandes adressées à un serveur qui hébergerait le service Web actuel.
Ces demandes sont effectuées par le biais de ce qu'on appels Remote Procedure Calls (RPC). Les RPC sont des appels aux méthodes hébergées par le service Web correspondant.

Par exemple, Amazon fournit un service Web qui fournit des prix pour les produits vendus en ligne via amazon.com. La couche frontale ou de présentation peut être en .Net ou en Java, mais les deux langage de programmation ne peuvent pas communiquer avec le service Web. 

Le composant principal d'un Web service est l'ensembles des données transférées entre le client et le serveur, c'est-à-dire XML. Ainsi, lorsque les applications se communiquent, elles parlent en fait en XML. Ceci fournit une plateforme commune pour que les applications développées en divers langages de programmation puissent communiquer entre elles.

Pour envoyer les données XML entre les applications, les Web services utilisent quelque chose appelé SOAP (Simple Object Access Protocol). Les données sont envoyées via HTTP normal. Les données envoyées par le service Web à l'application s'appellent un message SOAP. Le message SOAP n’est autre qu’un document XML. Tant que le document écrit en XML, l'application cliente appelant le Web service peut être écrite dans n'importe quel langage de programmation.


# SOAP (Simple Object Access Protocol) :


SOAP est connu comme un protocole de messagerie indépendant du transport (Transport-independent). SOAP est basé sur le transfert de données XML en tant que messages SOAP. Chaque message est présenté comme un document XML. Seule la structure du document XML suit un modèle spécifique, mais pas le contenu. La meilleure chose a propos des Web services et SOAP réside dans le fait qu’il est entièrement envoyé via le protocole Web standard, HTTP.

Voici quelques caracteristiques d'un message SOAP:
   	• Chaque document SOAP doit avoir un élément racine appelé élément <Envelope>. 
    • L’enveloppe est à son tour divisée en 2 parties. Le premier est l'en-tête (header) et le deuxieme est le corps (body).
    • L'en-tête contient les données de routage, qui sont essentiellement les informations qui indiquent au document XML à quel client il doit être envoyé.
    • Le corps contiendra le contenu du message.
    
    L'élément d'en-tête peut contenir des informations telles que des informations d'authentification qui peuvent être utilisées par l'application appelante. Il peut également contenir la définition de types complexes qui peuvent être utilisés dans le message SOAP. Par défaut, le message SOAP peut contenir des paramètres pouvant être de types simples, tels que des chaînes et des nombres, mais pouvant également être un type d'objet complexe.
    L'élément Body contient des informations sur les appels et les réponses: cet élément contient les données qui doivent être envoyées entre le Web service et l'application appelante. Vous trouverez ci-dessous un exemple de corps SOAP qui fonctionne réellement sur le type complexe défini dans la section d'en-tête. Voici la réponse du nom du didacticiel et de la description du didacticiel envoyée à l'application appelante qui appelle ce service Web.	
    
    
# Structure d'un message SOAP:    
Une chose à noter est que les messages SOAP sont normalement générés automatiquement par le Web service lors de son appel.
Chaque fois qu'une application cliente appelle une méthode dans le Web service, le Web service génère automatiquement un message SOAP 
qui contient les détails nécessaires des données qui seront envoyées depuis le web service vers l'application client.

Comme indiqué dans la rubrique précédente, un message SOAP simple comporte les éléments suivants:

    L'élément Envelope
    L'élément d'en-tête et
    L'élément de corps
    L'élément Fault (optionnel)

Regardons un exemple ci-dessous d'un message SOAP simple et voyons ce que l'élément fait actuellement.


--------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8" ?>
<soap:Envelope xmlns:xssi="http://www.w3.org/2001/XMLSchema-instance">

	<soap:Body>

		<MQL19WebService xmlns="http://tempuri.org/">

				<CourseID>int</CourseID>

		</MQL19WebService>

	</soap:Body>

</soap:Envelope>
--------------------------------------------------------------------------

1)	Comme le montre l'exemple du message SOAP ci-dessus, la première partie du message SOAP est l’élément 
	d’enveloppe utilisé pour encapsuler l’ensemble du message SOAP.
2)  L'élément suivant est le corps SOAP qui contient les détails du message réel.
3)  Notre message contient un service Web appelé "Guru99WebService".
4)  Le "Guru99Webservice" accepte un paramètre de type "int" et porte le nom de TutorialID.


À présent, le message SOAP ci-dessus sera transmis entre le service Web et l'application cliente.

Vous pouvez voir à quel point les informations ci-dessus sont utiles pour l'application cliente. 
Le message SOAP indique à l'application cliente quel est le nom du Web service, ainsi que les paramètres attendus et le type de chaque 
paramètre pris par le service Web.


L'element SOAP Envelope:

L'enveloppe SOAP est utilisée pour encapsuler tous les détails nécessaires des messages SOAP échangés entre le Web service et l'application client.
L'élément d'enveloppe SOAP est utilisé pour indiquer le début et la fin d'un message SOAP. Cela permet à l'application cliente qui appelle le 
Web service de savoir quand le message SOAP se termine.

Les points suivants peuvent être notés sur l'élément d'enveloppe SOAP.

    Chaque message SOAP doit avoir un élément d'enveloppe racine. Il est absolument obligatoire que le message SOAP a un élément d’enveloppe.
    Chaque élément d’enveloppe doit avoir au moins un élément Body.
    Si un élément Envelope contient un élément Header, il ne doit pas en contenir plus d'un et il doit apparaître comme le premier enfant de l'enveloppe, avant l'élément body.
    L'enveloppe change lorsque les versions de SOAP changent.
   	// Un processeur SOAP compatible v1.1 génère une erreur lors de la réception d'un message contenant l'espace de aitnoms v1.2.
    // Un processeur SOAP compatible v1.2 génère une erreur de non-concordance s'il reçoit un message n'incluant pas l'espace de nom de l'enveloppe v1.2.

Le message d'erreur:

Lorsqu'une demande est faite à un Web service SOAP, la réponse renvoyée peut être un des deux formes qui sont: une réponse succès ou une réponse d'erreur.
Lorsqu'un succès est généré, la réponse du serveur sera toujours un message SOAP. Mais si des erreurs SOAP sont générées, elles sont renvoyées sous forme 
d’erreurs "HTTP 500".

Le message d'erreur SOAP comprend les éléments suivants.

    <faultCode> - C'est le code qui désigne le code de l'erreur. Le code d'erreur peut être l'une des valeurs ci-dessous
        SOAP-ENV:VersionMismatch - Cela se produit lorsqu'un namespace non valide pour l'élément SOAP Envelope est rencontré.
        SOAP-ENV:MustUnderstand - Un élément enfant immédiat de l'élément Header, avec l'attribut mustUnderstand défini sur "1", n'a pas été compris.
        SOAP-ENV:Client - Le message n'a pas été correctement formé ou contient des informations incorrectes.
        SOAP-ENV:Server - Un problème est survenu avec le serveur. Le message n'a donc pas pu continuer.
    <faultString> - C'est le message texte qui donne une description détaillée de l'erreur.
    <faultActor> (Facultatif) - Il s'agit d'une chaîne de texte qui indique qui a causé l'erreur.
    <detail> (Facultatif) - Il s'agit de l'élément pour les messages d'erreur spécifiques à l'application. Ainsi, l'application pourrait avoir 
	un message d'erreur spécifique pour différents scénarios de logique métier.


Exemple de message d'erreur

Un exemple de message d'erreur est donné ci-dessous. L'erreur est générée si le scénario dans lequel le client tente d'utiliser une méthode appelée
CourseID dans la classe GetCourse.

Le message d'erreur ci-dessous est généré si la méthode n'existe pas dans la classe définie.


--------------------------------------------------------------------------

<?xml version='1.0' encoding='UTF-8'?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
				   xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" xmlns:xsd="http://www.w3.org/1999/XMLSchema">
      <SOAP-ENV:Body>
         <SOAP-ENV:Fault>
         <faultcode xsi:type="xsd:string">SOAP-ENV:Client</faultcode>
        <faultstring xsi:type="xsd:string">
            Failed to locate method (GetCourseID) in class (GetCourse)
         </faultstring>
    </SOAP-ENV:Fault>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--------------------------------------------------------------------------

Modèle de communication SOAP :

Toutes les communications SOAP se font via le protocole HTTP. Avant SOAP, de nombreux Web services utilisaient le style standard RPC 
(Remote Procedure Call) pour la communication. C'était le type de communication le plus simple, mais il y avait beaucoup de limitations.

Dans cet exemple, supposons que le serveur héberge un  Web service fournissant 2 méthodes telles que: GetStudent